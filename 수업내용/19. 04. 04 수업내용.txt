메소드 - 하나의 특정 기능을 하도록 작성된 코드
매개변수(입력) - 기능을 실행시키기 위한 정보, 정해진 약속대로 입력
		단, 자동형 변환이 가능한 경우는 융통성을 발휘 한다.
		=> 매개변수를 잘 정해야 한다.
		=> 매개변수는 최소한으로
리턴타입 - 기능이 종료되고 알려주는 정보
	- 기능을 상세히 썻을 때 알려준다. 전달한다. 등등의 단어가 나오면 리턴 타입이 필요하다
	- 그게 아니고 동작을 하고 부연설명이 없으면 리턴타입이 필요없다.

메소드
1. 재사용 용이하고
2. 코드의 중복을 줄이고
3. 프로그램의 구조화

더하세요 : 두 정수

계산하세요 : 두 정수, 연산자

기능 : 학생에게 두 정수합을 물어보는 기능 - 리턴이 있는경우
기능 : 학생에게 두 정수의 합을 칠판에 적는 기능 - 리턴이 없는경우 - 콘솔에 출력


객체지향언어
=> 순서를 지킴
=> 객체에 초점을 맞춤
=> 복사를 하고싶다 => 복사기 설계도(클래스)를 이용해서 복사기(객체)를 만들고, 
		      복사기능(메소드)을 이용하여 복사해라
절차지향언어
=> 순서에 초점을 맞춤
=> 복사를 하고싶다 => 복사하는 메소드를 만들어서 사용해라

재귀 메소드
 - 자기자신을 호출하는 메소드
 - statckOverFlowError가 발생하면 재귀호출을 의심해라

오버로딩
 - 한 클래스안에서 메소드명이 동일한 메소드가 여러개일 경우
 1. 매개변수의 갯수가 다른 경우
 2. 매개변수의 갯수가 같지만 자료형이 다른 경우

클래스 = 멤버변수 + 멤버 메소드
접근제한자 - public , default , privite , protected(상속)

클래스 = 설계도
객체 = 제품
클래스 객체명 = new 클래스();
객체명.멤버변수;
객체명.멤버메소드;

일반적으로
멤버변수는 private으로 설정
멤버메소드는 public으로 설정